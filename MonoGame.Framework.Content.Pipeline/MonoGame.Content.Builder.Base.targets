<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Choose>
    <When Condition=" '$(OS)' == 'Windows_NT' ">
      <PropertyGroup>
        <PackagePlatform>Windows</PackagePlatform>
      </PropertyGroup>
    </When>
    <When Condition=" '$(OS)' == 'OSX' ">
      <PropertyGroup>
        <PackagePlatform>MacOS</PackagePlatform>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <PackagePlatform>Linux</PackagePlatform>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <PathTokenCount>$(MSBuildThisFileDirectory.Split($([System.IO.Path]::DirectorySeparatorChar)).length)</PathTokenCount>
    <PathPackageTokenIndex>$([MSBuild]::Subtract($(PathTokenCount), 4))</PathPackageTokenIndex>
    <PathVersionTokenIndex>$([MSBuild]::Subtract($(PathTokenCount), 3))</PathVersionTokenIndex>
    <PackageName>$(MSBuildThisFileDirectory.Split($([System.IO.Path]::DirectorySeparatorChar))[$(PathPackageTokenIndex)])</PackageName>
    <PackageVersion>$(MSBuildThisFileDirectory.Split($([System.IO.Path]::DirectorySeparatorChar))[$(PathVersionTokenIndex)])</PackageVersion>
    <PlatformPackageParentDir>$(MSBuildThisFileDirectory)../tools/</PlatformPackageParentDir>
    <PlatformPackageName>$(PackageName).$(PackagePlatform)</PlatformPackageName>
    <PlatformPackageDir>$(PlatformPackageParentDir)$(PlatformPackageName).$(PackageVersion)/</PlatformPackageDir>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Mono support -->
    <MonoExe Condition=" '$(OS)' != 'Windows_NT' And Exists ('/Library/Frameworks/Mono.framework/Versions/Current/bin/mono') ">/Library/Frameworks/Mono.framework/Versions/Current/bin/mono</MonoExe>
    <MonoExe Condition=" '$(OS)' != 'Windows_NT' And Exists ('/usr/local/bin/mono') ">/usr/local/bin/mono</MonoExe>
    <MonoExe Condition=" '$(OS)' != 'Windows_NT' And Exists ('/usr/bin/mono') ">/usr/bin/mono</MonoExe>
    <MonoExe Condition=" '$(OS)' != 'Windows_NT' And '$(MonoExe)' == '' ">mono</MonoExe>

    <!-- Extra per platform folders that content needs to go to -->
    <PlatformResourcePrefix Condition=" '$(MonoGamePlatform)' == 'MacOSX' ">$(MonoMacResourcePrefix)</PlatformResourcePrefix>
    <PlatformResourcePrefix Condition=" '$(MonoGamePlatform)' == 'iOS' ">$(IPhoneResourcePrefix)</PlatformResourcePrefix>
    <PlatformResourcePrefix Condition=" '$(MonoGamePlatform)' == 'Android' ">$(MonoAndroidAssetsPrefix)</PlatformResourcePrefix>
    <PlatformResourcePrefix Condition=" '$(PlatformResourcePrefix)' != '' And !HasTrailingSlash('$(PlatformResourcePrefix)') ">$(PlatformResourcePrefix)\</PlatformResourcePrefix>

    <!-- NuGet -->
    <NuGetExe>$(PkgNuGet_CommandLine)\tools\NuGet.exe</NuGetExe>
    <NuGetCmd>&quot;$(NuGetExe)&quot;</NuGetCmd>
    <NuGetCmd Condition=" '$(OS)' != 'Windows_NT' ">$(MonoExe) $(NuGetCmd)</NuGetCmd>

    <!-- MGCB -->
    <MonoGameContentBuilderExe Condition="'$(MonoGameContentBuilderExe)' == ''">$(PlatformPackageDir)tools/Pipeline/MGCB.exe</MonoGameContentBuilderExe>
    <MonoGameContentBuilderCmd>&quot;$(MonoGameContentBuilderExe)&quot;</MonoGameContentBuilderCmd>
    <MonoGameContentBuilderCmd Condition=" '$(MonoExe)' != '' ">$(MonoExe) $(MonoGameContentBuilderCmd)</MonoGameContentBuilderCmd>
    <MonoGameContentBuilderArgs Condition="'$(MonoGameContentBuilderArgs)' == ''">/platform:$(MonoGamePlatform) /quiet</MonoGameContentBuilderArgs>

    <!-- Pipeline -->
    <MonoGameContentPipelineExe Condition="'$(MonoGameContentPipelineExe)' == ''">$(PlatformPackageDir)tools/Pipeline/Pipeline.exe</MonoGameContentPipelineExe>
    <MonoGameContentPipelineCmd>&quot;$(MonoGameContentPipelineExe)&quot;</MonoGameContentPipelineCmd>
    <MonoGameContentPipelineCmd Condition=" '$(MonoExe)' != '' ">$(MonoExe) $(MonoGameContentPipelineCmd)</MonoGameContentPipelineCmd>
  </PropertyGroup>

  <PropertyGroup>
    <BuildDependsOn>
      BuildContent;
      $(BuildDependsOn);
    </BuildDependsOn>
  </PropertyGroup>

  <UsingTask TaskName="MonoGame.Build.Tasks.CollectContentReferences" AssemblyFile="$(PlatformPackageDir)tools/Pipeline/MonoGame.Build.Tasks.dll" />

  <Target Name="GetPlatformPackage"
          Condition="!Exists($(PlatformPackageDir))">
    <Exec Command="$(NuGetCmd) install $(PlatformPackageName) -Version $(PackageVersion) -OutputDirectory $(PlatformPackageParentDir) -NonInteractive" />
  </Target>

  <Target Name="Prepare"
          DependsOnTargets="GetPlatformPackage">

    <!-- Get all Mono Game Content References and store them in a list -->
    <!-- We do this here so we are compatible with xbuild -->
    <CollectContentReferences ContentReferences="@(MonoGameContentReference)" MonoGamePlatform="$(MonoGamePlatform)">
      <Output TaskParameter="Output" ItemName="ContentReferences"/>
    </CollectContentReferences>

    <Error Text="The MonoGamePlatform property was not defined in the project!  It must be set to Windows, WindowsGL, WindowsStoreApp, WindowsPhone8, MacOSX, iOS, Linux, DesktopGL, RaspberryPi, Android, Ouya, NativeClient, PlayStation4, PSVita, XboxOne or PlayStationMobile."
       Condition="	'$(MonoGamePlatform)' != 'Windows' And
			'$(MonoGamePlatform)' != 'iOS' And       
			'$(MonoGamePlatform)' != 'Android' And       
			'$(MonoGamePlatform)' != 'Linux' And           
			'$(MonoGamePlatform)' != 'DesktopGL' And           
			'$(MonoGamePlatform)' != 'MacOSX' And       
			'$(MonoGamePlatform)' != 'WindowsStoreApp' And       
			'$(MonoGamePlatform)' != 'NativeClient' And       
			'$(MonoGamePlatform)' != 'PlayStationMobile' And       
			'$(MonoGamePlatform)' != 'WindowsPhone8' And       
			'$(MonoGamePlatform)' != 'RaspberryPi' And       
			'$(MonoGamePlatform)' != 'PlayStation4' And       
			'$(MonoGamePlatform)' != 'PSVita' And       
			'$(MonoGamePlatform)' != 'XboxOne' And 
			'$(MonoGamePlatform)' != 'WindowsGL'" />

    <Error
      Text="The MonoGame content builder executable could not be located at '$(MonoGameContentBuilderExe)'!"
      Condition="!Exists('$(MonoGameContentBuilderExe)')"
    />

    <Warning
      Text="No Content References Found. Please make sure your .mgcb file has a build action of MonoGameContentReference"
      Condition=" '%(ContentReferences.FullPath)' == '' "
    />

    <MakeDir Directories="%(ContentReferences.ContentOutputDir)" />
    <MakeDir Directories="%(ContentReferences.ContentIntermediateOutputDir)" />
  </Target>

  <Target Name="RunContentBuilder">
    <Exec Condition=" '%(ContentReferences.FullPath)' != '' "
          Command="$(MonoGameContentBuilderCmd) $(MonoGameContentBuilderArgs) /@:&quot;%(ContentReferences.FullPath)&quot; /outputDir:&quot;%(ContentReferences.ContentOutputDir)&quot; /intermediateDir:&quot;%(ContentReferences.ContentIntermediateOutputDir)&quot;"
          WorkingDirectory="%(ContentReferences.RootDir)%(ContentReferences.Directory)" />
    <CreateItem Include="%(ContentReferences.RelativeFullPath)%(ContentReferences.ContentOutputDir)\**\*.*"
      AdditionalMetadata="ContentOutputDir=%(ContentReferences.ContentDirectory)">
      <Output TaskParameter="Include" ItemName="ExtraContent" />
    </CreateItem>
  </Target>

  <Target Name="BuildContent"
          DependsOnTargets="Prepare;RunContentBuilder"
          Condition=" '@(MonoGameContentReference)' != '' "
          Outputs="%(ExtraContent.RecursiveDir)%(ExtraContent.Filename)%(ExtraContent.Extension)">

    <CreateItem Include="%(ExtraContent.FullPath)"
         AdditionalMetadata="Link=$(PlatformResourcePrefix)%(ExtraContent.ContentOutputDir)%(ExtraContent.RecursiveDir)%(ExtraContent.Filename)%(ExtraContent.Extension);CopyToOutputDirectory=PreserveNewest"
         Condition="'%(ExtraContent.Filename)' != ''">
      <Output TaskParameter="Include" ItemName="Content" Condition="'$(MonoGamePlatform)' != 'Android' And '$(MonoGamePlatform)' != 'iOS' And '$(MonoGamePlatform)' != 'MacOSX'" />
      <Output TaskParameter="Include" ItemName="BundleResource" Condition="'$(MonoGamePlatform)' == 'MacOSX' Or '$(MonoGamePlatform)' == 'iOS'" />
      <Output TaskParameter="Include" ItemName="AndroidAsset" Condition="'$(MonoGamePlatform)' == 'Android'" />
    </CreateItem>
  </Target>

  <Target Name="CreatePipelineShortcut"
          DependsOnTargets="Prepare"
          AfterTargets="CollectPackageReferences;Restore"
          Condition=" '@(MonoGameContentReference)' != '' AND '$(PipelineShortcut)' == 'true' ">

    <ItemGroup>
      <MonoGameContentPipelineProjectCmd Condition=" '$(OS)' == 'Windows_NT' " Include="start &quot;&quot; $(MonoGameContentPipelineCmd) &quot;%(ContentReferences.FullPath)&quot;"/>
      <MonoGameContentPipelineProjectCmd Condition=" '$(OS)' != 'Windows_NT' " Include="$(MonoGameContentPipelineCmd) &quot;%(ContentReferences.FullPath)&quot; &amp;"/>
    </ItemGroup>

    <PropertyGroup>
      <MonoGameContentPipelineScriptName>Pipeline</MonoGameContentPipelineScriptName>
      <MonoGameContentPipelineScriptName Condition=" '$(OS)' == 'Windows_NT' ">$(MonoGameContentPipelineScriptName).bat</MonoGameContentPipelineScriptName>
      <MonoGameContentPipelineScriptName Condition=" '$(OS)' != 'Windows_NT' ">$(MonoGameContentPipelineScriptName).sh</MonoGameContentPipelineScriptName>
      <MonoGameContentPipelineScript Condition=" '$(OS)' == 'Windows_NT' ">
        %40echo off
        @(MonoGameContentPipelineProjectCmd, '%0d')
        echo.
        echo   _     ___    _    ____ ___ _   _  ____
        echo  ^| ^|   / _ \  / \  ^|  _ \_ _^| \ ^| ^|/ ___^|
        echo  ^| ^|  ^| ^| ^| ^|/ _ \ ^| ^| ^| ^| ^|^|  \^| ^| ^|  _
        echo  ^| ^|__^| ^|_^| / ___ \^| ^|_^| ^| ^|^| ^|\  ^| ^|_^| ^|
        echo  ^|_____\___/_/   \_\____/___^|_^| \_^|\____^|
        echo.
        timeout 2
      </MonoGameContentPipelineScript>
      <MonoGameContentPipelineScript Condition=" '$(OS)' != 'Windows_NT' ">
        #!/bin/bash
        @(MonoGameContentPipelineProjectCmd, '%0d')
        echo ""
        echo "  _     ___    _    ____ ___ _   _  ____ "
        echo " | |   / _ \  / \  |  _ \_ _| \ | |/ ___|"
        echo " | |  | | | |/ _ \ | | | | ||  \| | |  _ "
        echo " | |__| |_| / ___ \| |_| | || |\  | |_| |"
        echo " |_____\___/_/   \_\____/___|_| \_|\____|"
        echo ""
        sleep 2
      </MonoGameContentPipelineScript>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(MSBuildProjectDirectory)\$(MonoGameContentPipelineScriptName)"
      Lines="$(MonoGameContentPipelineScript)"
      Overwrite="true"
      Encoding="ASCII"/>
  </Target>

</Project>
